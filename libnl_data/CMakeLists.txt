cmake_minimum_required(VERSION 3.16)
project(nl_data)
include(FindPkgConfig)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_FLAGS "-W -Wall -Wextra -Werror")

add_library(nl_data STATIC
        src/wireless.c
        src/wired.c
        src/common.c)

macro(hard_find)
    find_library(LIBNL_CORE NAMES nl3 nl-3)
    if (NOT LIBNL_CORE)
        message(FATAL_ERROR "libnl-3 not found")
    endif ()
    message(STATUS "Found libnl-3")
    find_library(LIBNL_ROUTE NAMES nl-route3 nl-route-3)
    if (NOT LIBNL_ROUTE)
        message(FATAL_ERROR "libnl-route-3 not found")
    endif ()
    message(STATUS "Found libnl-route-3")
    find_library(LIBNL_GENL NAMES nl-genl3 nl-genl-3)
    if (NOT LIBNL_GENL)
        message(FATAL_ERROR "libnl-genl-3 not found")
    endif ()
    message(STATUS "Found libnl-genl-3")
    find_file (LIBNL_INCLUDE_DIRS NAMES libnl3)
    if (NOT LIBNL_INCLUDE_DIRS)
        message(FATAL_ERROR "libnl3 includes not found")
    endif ()
    message(STATUS "Found libnl3 includes")
    set(LIBNL ${LIBNL_CORE} ${LIBNL_ROUTE} ${LIBNL_GENL})
endmacro()

if (PkgConfig_FOUND)
    pkg_check_modules(LIBNL libnl-3.0>=3.1 libnl-route-3.0>=3.1 libnl-genl-3.0>=3.1)
    if (NOT LIBNL_FOUND)
        hard_find()
    endif ()
    set(LIBNL ${LIBNL_LINK_LIBRARIES})
else ()
    hard_find()
endif ()

if (NOT LIBNL)
    message(FATAL_ERROR "libnl-3 not found")
endif ()

target_include_directories(nl_data INTERFACE ${PROJECT_BINARY_DIR}/include)
target_link_libraries(nl_data PRIVATE ${LIBNL})
target_include_directories(nl_data PRIVATE ${LIBNL_INCLUDE_DIRS})

install(TARGETS nl_data DESTINATION lib)
install(FILES include/nl_data.h DESTINATION include)
